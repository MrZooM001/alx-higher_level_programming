The 1-my_list.py module
==================================

Using `` MyList.print_sorted(self) ``
----------------------------
::
    >>> MyList = __import__('1-my_list').MyList
    >>> my_list = MyList()
    >>> my_list.append(1)
    >>> my_list.append(4)
    >>> my_list.append(3)
    >>> my_list.print_sorted()
    [1, 3, 4]

::
    >>> my_list = MyList(list)
    Traceback (most recent call last):
        ...
    TypeError: 'type' object is not iterable

::
    >>> my_list = MyList()
    >>> my_list.append(None)
    >>> my_list.append(1)
    >>> my_list.print_sorted()
    Traceback (most recent call last):
        ...
    TypeError: '<' not supported between instances of 'int' and 'NoneType'

::
    >>> my_list = MyList()
    >>> my_list.append('1')
    >>> my_list.append(4)
    >>> my_list.print_sorted()
    Traceback (most recent call last):
        ...
    TypeError: '<' not supported between instances of 'int' and 'str'

::
    >>> my_list2 = [3, 4]
    >>> my_list = MyList()
    >>> my_list.append(5)
    >>> my_list.append(my_list2)
    >>> my_list.print_sorted()
    Traceback (most recent call last):
        ...
    TypeError: '<' not supported between instances of 'list' and 'int'

::
    >>> my_list = MyList()
    >>> my_list.append(11)
    >>> my_list.append(4)
    >>> my_list.append(float('NaN'))
    >>> my_list.print_sorted()
    [4, 11, nan]

::
    >>> my_list = MyList()
    >>> my_list.append()
    Traceback (most recent call last):
        ...
    TypeError: list.append() takes exactly one argument (0 given)

::
    >>> my_list = MyList()
    >>> my_list.append(int('NaN'))
    Traceback (most recent call last):
        ...
    ValueError: invalid literal for int() with base 10: 'NaN'

::
